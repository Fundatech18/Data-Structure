#include<stdio.h>
#define MAX 5



void insert_front(int deQueue[],int *rear,int *front,int element){
    if((*rear+1 == *front) || (*front == 0 && *rear == MAX-1))
    {
        printf("Queue is Overflow");
    }else{
        if(*front == -1){
            *front = *rear = 0;
        }else if(*front == 0){
            *front = MAX-1;
        }else{
            (*front)--;
        }
        
        deQueue[*front] = element;
        printf("%d element is inserted at %d index using front.",element,*front);
    }
}


void insert_rear(int deQueue[],int *rear,int *front,int element){
    if((*rear+1 == *front) || (*front == 0 && *rear == MAX-1))
    {
        printf("Queue is Overflow");
    }else{
        if(*rear == -1){
            *rear = *front = 0;
        }else if(*rear == MAX-1){
            *rear = 0;
        }else {
            *rear+=1;
        }
        
        deQueue[*rear] = element;
        printf("%d element is inserted at %d index using front.",element,*rear);
    
    }
}

void delete_front(int deQueue[],int *rear,int *front){
    if(*front == -1){
        printf("Queue is underflow");
    }else{
        deQueue[*front] = 0;
        printf("Element is deleted from %d index",*front);
        if(*front == *rear){
            *front = *rear = -1;
        }else if(*front == MAX-1){
            *front = 0;
        }else{
            *front+=1;
        }
    }
}

void delete_rear(int deQueue[],int *rear,int *front){
    if(*front == -1){
        printf("Queue is empty");
        
    }else{
        deQueue[*rear] = 0;
        printf("Element is deleted from %d index",*rear);
        if(*rear == *front){
            *rear = *front = -1;
        }else if(*rear == 0){
            *rear = MAX-1;
        }else{
            *rear -= 1;
        }
    }
}

void modify(int deQueue[],int *rear,int *front,int element,int newElement){
    if(*front == -1){
        printf("Queue is Empty.");
    }
    int i = *front,temp=0;
    
    while(1){
        if(deQueue[i] == element){
            deQueue[i] = newElement;
            temp=1;
            break;
        }
        if(i == *rear){
            break;
        }
        i = (i+1)%MAX;
    }
}

void display(int deQueue[],int *rear,int *front){
    if(*front == -1){
        printf("Queue is Empty.");
    }else{
        int i = *front;
        while(1){
            printf("%d   ",deQueue[i]);
            if(i == *rear){
                break;
            }
            i = (i+1)%MAX;
        }
    }
}

void main(){
    int deQueue[MAX];
    int r=-1,f = -1;
    int *rear = &r,*front = &f;
    int newElement,element,choice;
    
    
    while(1){
        printf("\n");
        printf("1. Insert at Front\n");
        printf("2. Insert at Rear\n");
        printf("3. Delete from Front\n");
        printf("4. Delete from Rear\n");
        printf("5. Modify an element\n");
        printf("6. Display the deque\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch(choice){
            case 1:
            printf("Enter the element : ");
            scanf("%d",&element);
            insert_front(deQueue,rear,front,element);
            break;
            
            case 2:
            printf("Enter the element : ");
            scanf("%d",&element);
            insert_rear(deQueue,rear,front,element);
            break;
            
            case 3:
            delete_front(deQueue,rear,front);
            break;
            
            case 4:
            
            delete_rear(deQueue,rear,front);
            break;
            
            case 5:
            printf("Enter the element : ");
            scanf("%d",&element);
            printf("Enter the element : ");
            scanf("%d",&newElement);
            modify(deQueue,rear,front,element,newElement);
            break;
            
            case 6:
            display(deQueue,rear,front);
            break;
        }
    }
}
