// Bubble sort

#include <stdio.h>

void bubble_sort(int k[],int n){
    int pass,i,exch=0,last=n,temp;
    
    for(pass=0;pass<n;pass++){
        exch=0;
        for(i=0;i<last;i++){
            if(k[i] > k[i+1]){
                temp = k[i];
                k[i]=k[i+1];
                k[i+1]=temp;
                exch+=1;
            }
        }
        if(exch==0){
            break;
        }else{
            last = last-1;
        }
        
    }
}

void main() {
    int n = 5;
    int arr[5] = {55,35,25,75,8},i;
    
    bubble_sort(arr,n);
    
    for(i=0;i<n;i++){
        printf("%d  ",arr[i]);
    }
        
}


//Insertion sort
// Online C compiler to run C program online
#include <stdio.h>

void insertion_sort(int k[],int n){
    int i,key,j;
    for(i=0;i<n;i++){
        key=k[i];
        j = i-1;
        while(key < k[j] && j >= 0 ){
            k[j+1]=k[j];
            j--;
        }
        k[j+1]=key;
    }
}

void main() {
    int n = 7;
    int arr[7] = {55,27,58,18,35,31,19},i;
    
    insertion_sort(arr,n);
    
    for(i=0;i<n;i++){
        printf("%d  ",arr[i]);
    }
        
}


//merge Sort

// Online C compiler to run C program online
#include <stdio.h>

void merge(int a[],int low,int mid,int high){
    int l1=low,l2=mid+1,i=low;
    int b[7];
    
    while(l1<=mid && l2<=high){
        if(a[l1] <= a[l2]){
          b[i] = a[l1];
          l1++;
        }else {
          b[i] = a[l2];
          l2++; 
        }
        i++;
    }
    
    while(l1<=mid){
        b[i]=a[l1];
        i++;
        l1++;
    }
    
    while(l2<=high){
        b[i]=a[l2];
        i++;
        l2++;
    }
    
    for(i=low;i<=high;i++){
        a[i]= b[i];
    }
    
}

void merge_sort(int k[],int low,int high){
    if(low < high){
        int mid = (low+high)/2;
        merge_sort(k,low,mid);
        merge_sort(k,mid+1,high);
        merge(k,low,mid,high);
    }
}

void main() {
    int end = 7,start=0;
    int arr[7] = {55,27,58,18,1,31,19},i;
    
    merge_sort(arr,start,end-1);
    
    for(i=0;i<end;i++){
        printf("%d  ",arr[i]);
    }
        
}



//Quick 

// Online C compiler to run C program online
#include <stdio.h>



void quick(int k[],int low,int high){
    int flag=1,i,j,key,temp;
    if(low < high){
        i = low;
        j=high;
        key = k[low];
        while(flag==1){
            i=i+1;
            while(k[i] < key && i <= high){
                i++;
            }
            while(k[j] > key && j >= low){
                j--;
            }
            if(i < j){
                temp = k[i];
                k[i]=k[j];
                k[j]=temp;
            }else{
                temp = k[low];
                k[low]=k[j];
                k[j]=temp;
                flag = 0;
            }
        }
        quick(k,low,j-1);
        quick(k,j+1,high);
        
    }
}

void main() {
    int end = 7,start=0;
    int arr[7] = {55,27,58,18,1,31,19},i;
    
    quick(arr,start,end-1);
    
    for(i=0;i<end;i++){
        printf("%d  ",arr[i]);
    }
        
}



//Binary tree Insert delete
// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

struct tree {
    struct tree *left;
    int data;
    struct tree *right;
};


void insert(struct tree **root,int element){
    struct tree *newNode = (struct tree *)malloc(sizeof(struct tree));
    struct tree *curr,*prev = NULL;
    newNode->data = element;
    newNode->left = NULL;
    newNode->right = NULL;
    
    if(*root == NULL){
        *root = newNode;
    }
    
    curr = *root;
    
    while(curr != NULL){
        prev = curr;
        if(element < curr->data){
            curr = curr->left;
        }else if(element > curr->data){
            curr = curr->right;
        }else{
            break;
        }
    }
    
    if(element < prev->data){
            prev->left = newNode;
        }else if(element > prev->data){
            prev->right = newNode;
        }
}

struct tree* findMin(struct tree* root) {
    while (root && root->left != NULL) {
        root = root->left;
    }
    return root;
}

void delete(struct tree **root,int data){
     struct tree* parent = NULL;
    struct tree* current = *root;

    // Find the node to be deleted and its parent
    while (current != NULL && current->data != data) {
        parent = current;
        if (data < current->data) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    
    if (current == NULL) {
        printf("Node with value %d not found in the tree.\n", data);
    }else{
         if (current->left == NULL && current->right == NULL) {
        if (parent == NULL) {
            // The node to be deleted is the root
            free(current);
            
        }else{
            
        
        if (parent->left == current) {
            parent->left = NULL;
        } else {
            parent->right = NULL;
        }
        }
        free(current);
    } // Case 2: Node to be deleted has one child
    else if (current->left == NULL || current->right == NULL) {
        struct tree* child = (current->left != NULL) ? current->left : current->right;

        if (parent == NULL) {
            // The node to be deleted is the root
            *root = child;
        } else if (parent->left == current) {
            parent->left = child;
        } else {
            parent->right = child;
        }
        free(current);
    }else {
        // Find the inorder successor (smallest node in the right subtree)
        struct tree* successorParent = current;
        struct tree* successor = current->right;

        // Find the leftmost node (successor) in the right subtree
        while (successor->left != NULL) {
            successorParent = successor;
            successor = successor->left;
        }

        // Copy the inorder successor's data to the current node
        current->data = successor->data;

        // Delete the inorder successor
        if (successorParent->left == successor) {
            successorParent->left = successor->right;
        } else {
            successorParent->right = successor->right;
        }

        free(successor);
    }

    }

}


void Inorder(struct tree *root){
    if (root != NULL) {
        Inorder(root->left);
        printf("%d ", root->data);
        Inorder(root->right);
    }
}

void main() {
  struct tree *root = NULL;
  int choice;
  int element;
  
  while(1){
      printf("\nEnter choice : ");
      scanf("%d",&choice);
      
      switch(choice){
          case 1:
          printf("Enter element for insert : ");
          scanf("%d",&element);
          insert(&root,element);
          break;
          
          case 2:
          printf("Enter element for delete : ");
          scanf("%d",&element);
          delete(&root,element);
          break;
          
          case 3:
          Inorder(root);
          break;
      }
  }
    
}