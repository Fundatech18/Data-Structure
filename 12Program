// Write menu driven program to implement operations of singly circular linked list of integer 1) insert 2)delete 3) modify 4) display


#include <stdio.h>
#include <stdlib.h>

struct node {
  int data;// Write menu driven program to implement operations of singly circular linked list of integer 1) insert 2)delete 3) modify 4) display


#include <stdio.h>
#include <stdlib.h>

struct node {
  int data;
  struct node *next;
};

void insert(struct node **head, int element) {
  struct node *newNode, *temp;
  newNode = (struct node *)malloc(sizeof(struct node));
  newNode->data = element;
  if (*head == NULL) {
    newNode->next = newNode;
    *head = newNode;

  } else {
    temp = *head;
    while (temp->next != *head) {
      temp = temp->next;
    }
    newNode->next = (*head);
    temp->next = newNode;
    *head = newNode;
  }
}

void delete (struct node **head) {
  struct node *temp, *prev;
  if (*head == NULL) {
    printf("List is empty\n");
  } else {
    temp = *head;
    prev = *head;
    while (temp->next != *head) {
      temp = temp->next;
    }
    if (prev->next == temp->next) {
      *head = NULL;
      free(prev);
    } else {
      temp->next = (*head)->next;
      *head = (*head)->next;
      free(prev);
    }
  }
}



void display(struct node *head) {
  struct node *temp = head;
  int i = 0;
  if (temp == NULL) {
    printf("List is empty\n");
  } else {

    do {
      printf("%d -> ", temp->data);
      temp = temp->next;
      i++;
    } while (temp->next != head->next);
  }
}

void modify(struct node *head,int oldData,int newData){
    struct node *temp;
    if(head == NULL){
        printf("List is empty");
    }else{
        temp = head;
        if(temp->data == oldData){
            temp->data = newData;
        }else{
            while(temp->data != oldData ){
                temp = temp->next;
                if(temp == head){
                    break;
                }
            }
            if(temp != head){
                temp->data = newData;
            }
            if(temp == head){
                printf("Element is not Found\n");
            }
        }
    }
}

void main() {
  struct node *head = NULL;
  int element, choice, oldData, newData;

  while (1) {
    printf("\n1 For Insert \n");
    printf("2 For Delete \n");
    printf("3 For Modify \n");
    printf("4 For Display \n");
    printf("Enter Your Choice : ");
    scanf("%d", &choice);

    switch (choice) {
    case 1:
      printf("Enter the element :");
      scanf("%d", &element);
      insert(&head, element);
      break;

    case 2:
      delete (&head);
      break;

    case 3:
      printf("Enter old data to modify: ");
      scanf("%d", &oldData);
      printf("Enter new data: ");
      scanf("%d", &newData);
      modify(head, oldData, newData);
      break;

    case 4:
      display(head);
      break;
    }
  }
}
  struct node *next;
};

void insert(struct node **head, int element) {
  struct node *newNode, *temp;
  newNode = (struct node *)malloc(sizeof(struct node));
  newNode->data = element;
  if (*head == NULL) {
    newNode->next = newNode;
    *head = newNode;

  } else {
    temp = *head;
    while (temp->next != *head) {
      temp = temp->next;
    }
    newNode->next = (*head);
    temp->next = newNode;
    *head = newNode;
  }
}

void delete (struct node **head) {
  struct node *temp, *prev;
  if (*head == NULL) {
    printf("List is empty\n");
  } else {
    temp = *head;
    prev = *head;
    while (temp->next != *head) {
      temp = temp->next;
    }
    if (prev->next == temp->next) {
      *head = NULL;
      free(prev);
    } else {
      temp->next = (*head)->next;
      *head = (*head)->next;
      free(prev);
    }
  }
}

void modify(struct node *head, int oldData, int newData) {
  struct node *temp = head;
  struct node *prev;

  if (temp == NULL) {
    printf("List is empty\n");
  }
}

void display(struct node *head) {
  struct node *temp = head;
  int i = 0;
  if (temp == NULL) {
    printf("List is empty\n");
  } else {

    do {
      printf("%d -> ", temp->data);
      temp = temp->next;
      i++;
    } while (temp->next != head->next);
  }
}

void main() {
  struct node *head = NULL;
  int element, choice, oldData, newData;

  while (1) {
    printf("\n1 For Insert \n");
    printf("2 For Delete \n");
    printf("3 For Modify \n");
    printf("4 For Display \n");
    printf("Enter Your Choice : ");
    scanf("%d", &choice);

    switch (choice) {
    case 1:
      printf("Enter the element :");
      scanf("%d", &element);
      insert(&head, element);
      break;

    case 2:
      delete (&head);
      break;

    case 3:
      printf("Enter old data to modify: ");
      scanf("%d", &oldData);
      printf("Enter new data: ");
      scanf("%d", &newData);
      modify(head, oldData, newData);
      break;

    case 4:
      display(head);
      break;
    }
  }
}
